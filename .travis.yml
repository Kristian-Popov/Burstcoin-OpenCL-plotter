language: cpp
# TODO add support for clang and Mac OS X
compiler: gcc
dist: trusty
sudo: false
env:
  global:
    # Ubuntu version
    - LINUX_DIST=trusty
    # Global build options and C++ flags
    # TODO add -Werror?
    - CXX_FLAGS="-Wall -pedantic"
    # Misc
    - RUN_TESTS=true
    - COVERAGE=false
    - NUM_THREADS=4

matrix:
  include:
    # g++ 5 comes with Ubuntu 16.04 LTS (Xenial Xerus)
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env:
         - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5"

    # Newest release
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"

before_install:
    - eval "${MATRIX_EVAL}"
    # Combine global build options with OS/compiler-dependent options
    - export CMAKE_OPTIONS=${CMAKE_OPTIONS}" "${ENV_CMAKE_OPTIONS}
    - export CXX_FLAGS=${CXX_FLAGS}" "${ENV_CXX_FLAGS}

install:
    # Download and install CMake
    # Also useful stuff here https://stackoverflow.com/q/47222115
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        CMAKE_URL="https://cmake.org/files/v3.10/cmake-3.10.2-Linux-x86_64.tar.gz";
        mkdir cmake && travis_retry wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake;
        export PATH=${TRAVIS_BUILD_DIR}/cmake/bin:${PATH};
      else
        brew outdated cmake || brew upgrade cmake;
      fi
    # Print CMake version, just in case
    - cmake --version
    # Download and build Boost
    - travis_retry wget -O boost_1_65_1.tar.gz https://dl.bintray.com/boostorg/release/1.65.1/source/boost_1_65_1.tar.gz
    - tar xzf boost_1_65_1.tar.gz
    - pushd boost_1_65_1/
    - ./bootstrap.sh --with-libraries=program_options,filesystem,system,log
    - ./b2 -d0 link=static threading=multi address-model=64
    - popd

script:
    # Setup hooks and update version
    - ./setup-hooks.sh
    - scripts/update-version.sh
    # Build all tools and unit tests
    - echo "Building all tools and unit tests"
    - mkdir -p build
    - pushd build
    - cmake ${CMAKE_OPTIONS} -DCMAKE_CXX_FLAGS=${CXX_FLAGS} -DBOOST_ROOT="../boost_1_65_1" ..
    - make
    # Run unit tests
    - echo "Running unit tests"
    - ./unit_tests/unit_tests
    # Compile mdcct
    - git clone https://github.com/Mirkic7/mdcct.git mdcct
    - pushd mdcct
    - make
    - popd
    # Build source files for optimizer
    - mkdir -p source-files
    - KEY=1
    - STARTNONCE=0
    - NONCE_COUNT=40
    - ./mdcct/plot -k ${KEY} -s ${STARTNONCE} -n ${NONCE_COUNT} -d source-files -m 1 -t ${NUM_THREADS}
    # Compile omdcct
    - git clone https://github.com/Kristian-Popov/omdcct.git omdcct
    - pushd omdcct
    - make
    - popd
    # Build correct result files using an omdcct
    - mkdir -p expected-result-files
    - ./omdcct/plot -k ${KEY} -s ${STARTNONCE} -n ${NONCE_COUNT} -d expected-result-files -t ${NUM_THREADS}
    # Optimize files using our optimizer
    - mkdir -p result-files
    - ./optimizer/burstcoin-optimizer "source-files/${KEY}_${STARTNONCE}_${NONCE_COUNT}_1" -o result-files
    # Compare files
    - pushd result-files
    - find . -type f -exec cmp {} ../expected-result-files/{} \;
deploy:
  provider: releases
  api_key:
    secure: pSRuOn3yL7dUxWAmTHDtWQAdZ1jZZttWqQgY8U+eFSD1I+2oWFBm/N5MQLRd/zu1v+DJpSm723iKAbashUflkvCHmZjl97GGL8yRGYmECUBT13YONYj0BbLLy/sVvnqef/Z40lF6kqrJjmuiJjLPfIDXsLTf9X5N9xS5dsWOAKKKUX7HKadsJp8XYc2+xsdkQhkbONE3Dps50N1grXY3qAwhC8M15jli40z6gNLoBJIaHK/nPT7VNvf0qoPavI27eeLt7/dVH0m+InEytzJHI4fkaijbr/RppVay19Pv9i4G887pSIdAiBG5Gm8GLicM6ad4Tk+49FL23JZWTO1RcZDNYZHpVQdzgiEpN8LD/KsB3Y7ApRsayTnHKPIo5VPUozbkuali/T18vo6jLwBpUJL+piFOZ/C1mCX1+WBzukOUZzD9oPfLAmcqNg4PaNbZp03/V4jzsdei2HvdFCg0QK1p+LGn1tMoXhMZkus0x8r56ZAeplQRxofaJmAaq674VfQDfagFG+LkOOwfRLvj9NIb6C1TzC1lPGPn/d/iMepDtxmBXxytQAVzCyvM84OVGeUu/2y0rz/9HSH7ki+E9ZyIobtccW4eOGRf8f+tMCW53Ej75KyGx6o6i+kGBs/pKyFvHFTS+C/bIuQic/ToX0/DO4eIzp6cmkRIvNV9mCI=
  file:
    - build/plot_planner/burstcoin-plot-planner
    - build/optimizer/burstcoin-optimizer
    - build/overlap_checker/burstcoin-overlap-checker
  skip_cleanup: true
  on:
    repo: Kristian-Popov/Burstcoin-OpenCL-plotter
    tags: true
